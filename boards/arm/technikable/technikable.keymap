/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// #define QWERTY_BASE 1

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    behaviors {
        td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LCTRL LCTRL>, <&mt LCMD LCMD>;
        };
    };

    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <NAV_L NUM_L>;
	    then-layer = <SYM_L>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp TAB    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp BKSP
 &kp ESC    &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &mt RSHIFT RET
                       &td_mt     &kp LALT    &mo NAV_L      &kp SPACE      &kp SPACE        &mo NUM_L      &kp RWIN    &kp RCTRL
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
 &kp GRAVE  &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp N7      &kp N8   &kp N9    &kp P         &kp BKSP
 &kp DEL    &kp F1     &kp F2     &kp F3      &kp F4         &kp F5         &kp F6           &kp N4      &kp N5   &kp N6    &kp SEMI      &kp QUOT
 &kp LSHFT  &kp F7     &kp F8     &kp F9      &kp F10        &kp F11        &kp F12          &kp N1      &kp N2   &kp N3    &kp FSLH      &mt RET RSHIFT
                       &td_mt     &kp LALT    &mo NAV_L      &kp SPACE      &kp SPACE        &mo NUM_L   &kp N0   &kp RCTRL
            >;
        };


        num_layer {
            label = "Num";
            bindings = <
 &kp TILDE2 &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp AMPS       &kp STAR    &kp EQUAL  &kp MINUS     &kp BKSP
 &kp ESC    &kp LBKT   &kp RBKT   &kp LPAR    &kp RPAR       &kp G          &kp H            &kp DLLR       &kp PRCNT   &kp CARET  &kp BSLH      &kp PIPE2
 &kp LSHFT  &kp LBRC   &kp RBRC   &kp C       &kp V          &kp B          &kp N            &kp EXCL       &kp AT      &kp HASH   &kp FSLH      &mt RET RSHIFT
                       &td_mt     &kp LALT    &mo NAV_L      &kp SPACE      &kp SPACE        &mo NUM_L      &kp RWIN    &kp RCTRL
            >;
        };

  sym_layer {
            label = "Sym";
            bindings = <
&bt BT_CLR &kp LBRC      &kp LS(N7)   &kp LS(N8)    &kp LS(N9)     &kp RBRC     &trans       &trans      &trans       &trans         &trans        &kp PSCRN
&trans     &kp COLON     &kp C_VOL_UP &kp C_VOL_DN  &kp C_MUTE     &kp PLUS     &trans       &kp LEFT    &kp UP       &kp DOWN       &kp RIGHT     &trans
&trans     &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4 &bt BT_SEL 5 &kp HOME    &kp PG_UP    &kp PG_DN      &kp END       &trans
                         &td_mt       &kp LALT      &mo NAV_L      &kp SPACE    &kp SPACE    &mo NUM_L   &kp RWIN     &kp RCTRL
            >;
        };

    };
};
